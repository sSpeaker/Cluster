---
kind: "Template"
apiVersion: "v1"
metadata:
  name: cluster
objects:
- apiVersion: kops/v1alpha2
  kind: Cluster
  metadata:
    name: "$(CLUSTER_NAME)"
  spec:
    additionalPolicies:
      node: |
        [
          {
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "acm:GetCertificate",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcs",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:RevokeSecurityGroupIngress",
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateRule",
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeleteRule",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeSSLPolicies",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:ModifyRule",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:ModifyTargetGroupAttributes",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:RemoveTags",
              "elasticloadbalancing:SetIpAddressType",
              "elasticloadbalancing:SetSecurityGroups",
              "elasticloadbalancing:SetSubnets",
              "elasticloadbalancing:SetWebACL",
              "iam:GetServerCertificate",
              "iam:ListServerCertificates",
              "iam:CreateServiceLinkedRole",
              "waf-regional:GetWebACLForResource",
              "waf-regional:GetWebACL",
              "waf-regional:AssociateWebACL",
              "waf-regional:DisassociateWebACL",
              "tag:GetResources",
              "tag:TagResources",
              "waf:GetWebACL"
            ],
            "Resource": ["*"]
          },
          {
            "Effect": "Allow",
            "Action": [
              "route53:ListHostedZones",
              "route53:ListResourceRecordSets",
              "route53:ChangeResourceRecordSets"
            ],
            "Resource": ["*"]
          }
        ]
    cloudLabels:
      kubernetes.io/cluster/${KOPS_CLUSTER_NAME}: owned
    api:
      dns: {}
    authorization:
      rbac: {}
    channel: stable
    cloudProvider: aws
    configBase: s3://$(S3_BUCKET)/$(CLUSTER_NAME)
    etcdClusters:
    - etcdMembers:
      - instanceGroup: master-$(AZ_1)
        name: a
      - instanceGroup: master-$(AZ_2)
        name: b
      - instanceGroup: master-$(AZ_3)
        name: c
      name: main
    - etcdMembers:
      - instanceGroup: master-$(AZ_1)
        name: a
      - instanceGroup: master-$(AZ_2)
        name: b
      - instanceGroup: master-$(AZ_3)
        name: c
      name: events
    iam:
      allowContainerRegistry: true
      legacy: false
    kubernetesApiAccess:
    - 0.0.0.0/0
    kubernetesVersion: 1.12.8
    masterPublicName: api.$(CLUSTER_NAME)
    networkCIDR: 172.20.0.0/16
    networking:
      kubenet: {}
    nonMasqueradeCIDR: 100.64.0.0/10
    sshAccess:
    - 0.0.0.0/0
    subnets:
    - cidr: 172.20.32.0/19
      name: $(AZ_1)
      type: Public
      zone: $(AZ_1)
    - cidr: 172.20.64.0/19
      name: $(AZ_2)
      type: Public
      zone: $(AZ_2)
    - cidr: 172.20.96.0/19
      name: $(AZ_3)
      type: Public
      zone: $(AZ_3)
    topology:
      dns:
        type: Public
      masters: public
      nodes: public
parameters:
  - name: "CLUSTER_NAME"
    required: true
    parameterType: "string"
  - name: "S3_BUCKET"
    required: true
    parameterType: "string"
  - name: "AZ_1"
    required: true
    parameterType: "string"
  - name: "AZ_2"
    required: true
    parameterType: "string"
  - name: "AZ_3"
    required: true
    parameterType: "string"
